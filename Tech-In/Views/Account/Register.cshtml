@model RegisterViewModel
@inject SignInManager<ApplicationUser> SignInManager
@using System.Linq
@{
    ViewData["Title"] = "Sign Up";
}

<h2 style="text-align:center;">@ViewData["Title"]</h2>
<div>
    <section class="col-md-offset-0" style="float:none;">
        <hr />
        @{
            var loginProviders = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToList();
            if (loginProviders.Count != 0)
            {
                <form asp-action="ExternalLogin" asp-route-returnurl="@ViewData["ReturnUrl"]" method="post" class="form-horizontal">
                    <div class="center">
                        <p>
                            @foreach (var provider in loginProviders)
                            {
                                if (provider.Name == "Facebook")
                                {
                                    <button type="submit" class="loginBtn loginBtn--facebook" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">Continue using @provider.Name</button>
                                }
                                if (provider.Name == "Google")
                                {
                                    <button type="submit" class="loginBtn loginBtn--google" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">Continue using @provider.Name</button>
                                }
                            }
                        </p>
                    </div>
                </form>
            }
        }
    </section>
</div>
<div style="padding:50px;" class="row col-md-offset-4">
    <div class="col-md-6">
        <form id="signUp" asp-route-returnUrl="@ViewData["ReturnUrl"]" method="post">
            <h4>Create a new account.</h4>
            <hr />
            <div asp-validation-summary="All" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Email"></label>
                <input asp-for="Email" class="form-control" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Password"></label>
                <input asp-for="Password" class="form-control" />
                <span asp-validation-for="Password" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ConfirmPassword"></label>
                <input asp-for="ConfirmPassword" class="form-control" />
                <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
            </div>
            <button type="submit" class="main-btn btn-block blue-g-btn">
                <b>Register</b>
            </button>
        </form>
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
}
<script>
    $(document).ready(function () {
        //Form Validation
        $('#signUp').bootstrapValidator({
            feedbackIcons: {
                valid: 'glyphicon glyphicon-ok',
                invalid: 'glyphicon glyphicon-remove',
                validating: 'glyphicon glyphicon-refresh'
            },
            fields: {
                Email: {
                    validators: {
                        emailAddress: {
                            message: ''
                        }
                    }
                },
                Password: {
                    validators: {
                        stringLength: {
                            min: 8,
                            max: 256,
                            message: 'Password can contain minimum 8 characters'
                        },
                        regexp: {
                            regexp: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[#$^+=!*()@@%&]).{8,}$',
                            message: 'Password must contain at least one upper case letter, one lower case letter, one number & one special character!'
                        },
                        notEmpty: {
                            message: 'Password is required'
                        }
                    }
                },
                ConfirmPassword: {
                    validators: {
                        identical: {
                            field: 'Password',
                            message: ''
                        },
                        notEmpty: {
                            message: 'Password is required'
                        }
                    }
                }
            }
        });


        
    })</script>
