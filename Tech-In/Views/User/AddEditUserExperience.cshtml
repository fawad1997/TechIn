@model ExperienceVM
<script src="~/lib/jquery-validation/dist/additional-methods.js"></script>
<script src="~/lib/jquery-validation/dist/jquery.validate.js"></script>
<form id="expForm">
    @Html.HiddenFor(m => m.UserExperienceId)
    <!--Title-->
    <div class="form-group">
        <label class="control-label" asp-for="Title"></label>
        @Html.TextBoxFor(m => m.Title, new { @class = "input", @placeholder = "Experience Title..." })
        @Html.ValidationMessageFor(m => m.Title, "", new { @class = "text-danger" })
    </div>
    <!--/Title-->
    <!--Company-->
    <div class="form-group">
        <label class="control-label" asp-for="CompanyName"></label>
        @Html.TextBoxFor(m => m.CompanyName, new { @class = "input", @placeholder = "e.g. Nexin (Pvt) Limited" })
        @Html.ValidationMessageFor(m => m.CompanyName, "", new { @class = "text-danger" })
    </div>
    <!--/Company-->
    <!--Text Area-->
    <div class="form-group">
        <label class="control-label" asp-for="Description"></label>
        @Html.TextAreaFor(m => m.Description, new { @class = "input", @placeholder = "Job Description" })
        @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
    </div>
    <!--/Text Area-->
    <div class="row">
        <div class="col-sm-6">
            <!--Country-->
            <div class="form-group">
                <label class="control-label" asp-for="CountryId"></label>
                @if (ViewBag.CountryList != null)
                {
                        @Html.DropDownListFor(model => model.CountryId, ViewBag.CountryList as SelectList, "--Select--", new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.CountryId, "", new { @class = "text-danger" })
                }
            </div>
            <!--/Country-->
        </div>
        <div class="col-sm-6">
            <!--City-->
            <div class="form-group">
                <label class="control-label" asp-for="CityId"></label>
                @Html.DropDownListFor(m => m.CityId, new SelectList(""), "--Select--", new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.CityId, "", new { @class = "text-danger" })
            </div>
            <!--/City-->
        </div>
    </div>
    <div class="row">
        <div class="col-sm-6">
            <!--Start Date-->
            <div class="form-group">
                <label class="control-label">From</label>
                <input asp-for="StartDate" class="input" min="1970-01-01" max="2018-08-08">
                @Html.ValidationMessageFor(m => m.StartDate, "", new { @class = "text-danger" })
            </div>
            <!--/Start Date-->
        </div>
        <div class="col-sm-6">
            <!--End Date-->
            <div class="form-group" id="EndDateDiv">
                <label class="control-label">To</label>
                @Html.TextBoxFor(m => m.EndDate, new { @class = "input", @type = "date" })
            </div>
            <!--/End Date-->
        </div>
    </div>
    <div class="form-group">
        <div class="checkbox">
            <label>
                @Html.CheckBoxFor(m => m.CurrentWorkCheck)
                I Currently Work here.
            </label>
        </div>
    </div>
    <div class="form-group">
        <button id="expSubmit" type="button" class="main-btn btn-block">
            @if (Model.UserExperienceId > 0)
            {

                <span>Update</span>
            }
            else
            {

                <span>Save</span>
            }
        </button>
    </div>
    <div class="cent" id="loaderDiv">
        <img src="~/images/load.gif" />
    </div>
</form>
<script>
    $(document).ready(function () {

        //Form Validation
        $('#expForm').bootstrapValidator({
            feedbackIcons: {
                valid: 'glyphicon glyphicon-ok',
                invalid: 'glyphicon glyphicon-remove',
                validating: 'glyphicon glyphicon-refresh'
            },
            fields: {
                Title: {
                    validators: {
                        stringLength: {
                            min: 3,
                            max: 50,
                            message: 'Title can contain minimum 3 and maximum 50 letters'
                        },
                        regexp: {
                            regexp: /^[a-z\s.#]+$/i,
                            message: 'Title can contains alphabets only.'
                        },
                        notEmpty: {
                            message: 'Title is required'
                        }
                    }
                },
                CompanyName: {
                    validators: {
                        stringLength: {
                            min: 2,
                            max: 100,
                            message: 'Company Name should contain minimum 2 characters'
                        },
                        notEmpty: {
                            message: 'Company Name is required'
                        }
                    }
                },
                Description: {
                    validators: {
                        stringLength: {
                            min: 10,
                            max: 200,
                            message: 'Description should contain minimum 10 characters and max 200.'
                        }
                    }
                },
                StartDate: {
                    validators: {
                        notEmpty: {
                            message: 'Start Date is required'
                        }
                    }
                },
                CountryId: {
                    validators: {
                        notEmpty: {
                            message: 'Country Name is required'
                        }
                    }
                },
                CityId: {
                    validators: {
                        notEmpty: {
                            message: 'City Name is required'
                        }
                    }
                },

            }
        });

        //Dates

        var startDate = document.getElementById('StartDate');
        var endDate = document.getElementById('EndDate');
        startDate.valueAsDate = new Date();
        
        endDate.valueAsDate = new Date();

        
        var todaysDate = new Date();

        function convertDate(date) {
            var yyyy = date.getFullYear().toString();
            var mm = (date.getMonth() + 1).toString();
            var dd = date.getDate().toString();

            var mmChars = mm.split('');
            var ddChars = dd.split('');

            return yyyy + '-' + (mmChars[1] ? mm : "0" + mmChars[0]) + '-' + (ddChars[1] ? dd : "0" + ddChars[0]);
        } //Coverts Date to yyyy-mm-dd
        startDate.setAttribute("max", convertDate(todaysDate));
        endDate.setAttribute("max", convertDate(todaysDate));
        endDate.setAttribute("min", convertDate(todaysDate));
        startDate.onchange = function () {
            endDate.setAttribute("min", convertDate(startDate.valueAsDate));
            //alert(startDate.valueAsDate);
            //console.log(convertDate(startDate.valueAsDate));
        }


        //Submit Form
        $("#expSubmit").click(function () {
            var validator = $('#expForm').data('bootstrapValidator');
            validator.validate();
            if (validator.isValid()) {
                $("#loaderDiv").show();
                var expFormData = $("#expForm").serialize();
                $.ajax({

                    type: "POST",
                    url: "/User/UpdateExperience",
                    data: expFormData,
                    success: function (result) {
                        if (result.success) {
                            $("#loaderDiv").hide();
                            $("#myExp").modal("hide");
                            window.location.href = "/u/" + result.username;
                        } else {
                            $("#loaderDiv").hide();
                            $('#expForm').html(result);

                        }
                    }
                })
            }//If Is Valid
        })//Submit Button Click


        //For DIsplaying Cities List
        $("#CountryId").change(function () {
            var countryId = $(this).val();
            
            $.ajax({
                type: "POST",
                url: "/User/GetCitiesList?CountryId=" + countryId,
                contentType: "html",
                success: function (response) {

                    $("#CityId").empty();
                    $("#CityId").append(response);

                }

            })
        })
        //For Current Work Status
        $("#CurrentWorkCheck").change(function () {
            if (this.checked) {
                $("#EndDateDiv").hide();

            } else {
                $("#EndDateDiv").show();

            }

        })

    })
</script>
